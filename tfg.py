# -*- coding: utf-8 -*-
"""TFG.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/11GT40O9MHmiqGfJ2OwPVUQHISVjv-hy7

# PCA
"""

import pandas as pd
from sklearn.preprocessing import StandardScaler
from google.colab import files
import io

uploaded = files.upload()

df = pd.read_csv(io.BytesIO(uploaded['PCA_data.csv']))

data = df

countries = data['Country Name']
data = data.drop('Country Name', axis=1)
malaria = data['Malaria Cases']
data = data.drop('Malaria Cases', axis=1)
tuberculosis = data['TB Cases']
data = data.drop('TB Cases', axis=1)
hiv = data['HIV Cases']
data = data.drop('HIV Cases', axis=1)
sida = data['Infant Mortality']
data = data.drop('Infant Mortality', axis=1)
data = data.drop('Antiretroviral Coverage People with HIV', axis=1)
data = data.drop('Pregnant Women Living with HIV who Received Antiretrovirals', axis=1)
mala = data['Prevalence of Underweight']
data = data.drop('Health Workers', axis=1)
data = data.drop('Tratamiento Antirtroviral', axis=1)
data = data.drop('Antenatal Care Coverage', axis=1)

scaler = StandardScaler()
data_scaled = scaler.fit_transform(data)

from sklearn.decomposition import PCA
import matplotlib.pyplot as plt

PCA = PCA()

principal_components = PCA.fit_transform(data_scaled)

explained_variance = PCA.explained_variance_ratio_
plt.plot(range(1, len(explained_variance)+1), explained_variance, marker='o', linestyle='--')
plt.xlabel('Número de Componentes')
plt.ylabel('Varianza Explicada')
plt.title('Varianza Explicada por Componentes Principales')
plt.show()

import numpy as np

plt.figure(figsize=(10, 5))
plt.bar(range(1, len(explained_variance) + 1), explained_variance, alpha=0.5, align='center', label='Varianza individual explicada')
plt.step(range(1, len(explained_variance) + 1), np.cumsum(explained_variance), where='mid', label='Varianza acumulada explicada')
plt.ylabel('Ratio de Varianza Explicada')
plt.xlabel('Componentes Principales')
plt.legend(loc='best')
plt.tight_layout()
plt.show()

X_pca = PCA.transform(data_scaled)
colores = tuberculosis

plt.figure(figsize=(12,8))
scatter = plt.scatter(X_pca[:, 0], X_pca[:, 1], c=colores, cmap='viridis')
plt.xlabel('Primera Componente Principal')
plt.ylabel('Segunda Componente Principal')
plt.title('Gráfico de dispersión de las dos primeras componentes principales, coloreado segun el número de casos de Tuberculosis')
plt.colorbar(scatter)
plt.show()

colores2 = malaria

plt.figure(figsize=(12,8))
scatter = plt.scatter(X_pca[:, 0], X_pca[:, 1], c=colores2, cmap='viridis')
plt.xlabel('Primera Componente Principal')
plt.ylabel('Segunda Componente Principal')
plt.title('Gráfico de dispersión de las dos primeras componentes principales, coloreado segun el número de casos de Malaria')
plt.colorbar(scatter)
plt.show()

colores3 = hiv

plt.figure(figsize=(12,8))
scatter = plt.scatter(X_pca[:, 0], X_pca[:, 1], c=colores3, cmap='viridis')
plt.xlabel('Primera Componente Principal')
plt.ylabel('Segunda Componente Principal')
plt.title('Gráfico de dispersión de las dos primeras componentes principales, coloreado segun el número de casos de HIV')
plt.colorbar(scatter)
plt.show()

from mpl_toolkits.mplot3d import Axes3D

colores4 = tuberculosis

fig = plt.figure(figsize=(12, 10))
ax = fig.add_subplot(111, projection='3d')

scatter = ax.scatter(X_pca[:, 0], X_pca[:, 1], X_pca[:, 2], c=colores4, cmap='viridis', s=50)

ax.set_xlabel('Primera Componente Principal')
ax.set_ylabel('Segunda Componente Principal')
ax.set_zlabel('Tercera Componente Principal')
ax.set_title('Gráfico de dispersión de las tres primeras componentes principales, coloreado según el número de casos de Tuberculosis')

cbar = fig.colorbar(scatter, ax=ax, pad=0.1)
cbar.set_label('Número de casos de Tuberculosis')

plt.show()

colores5 = malaria

fig = plt.figure(figsize=(12, 10))
ax = fig.add_subplot(111, projection='3d')

scatter = ax.scatter(X_pca[:, 0], X_pca[:, 1], X_pca[:, 2], c=colores5, cmap='viridis', s=50)

ax.set_xlabel('Primera Componente Principal')
ax.set_ylabel('Segunda Componente Principal')
ax.set_zlabel('Tercera Componente Principal')
ax.set_title('Gráfico de dispersión de las tres primeras componentes principales, coloreado según el número de casos de Malaria')

cbar = fig.colorbar(scatter, ax=ax, pad=0.1)
cbar.set_label('Número de casos de Malaria')

plt.show()

colores6 = hiv

fig = plt.figure(figsize=(12, 10))
ax = fig.add_subplot(111, projection='3d')

scatter = ax.scatter(X_pca[:, 0], X_pca[:, 1], X_pca[:, 2], c=colores6, cmap='viridis', s=50)

ax.set_xlabel('Primera Componente Principal')
ax.set_ylabel('Segunda Componente Principal')
ax.set_zlabel('Tercera Componente Principal')
ax.set_title('Gráfico de dispersión de las tres primeras componentes principales, coloreado según el número de casos de HIV')

cbar = fig.colorbar(scatter, ax=ax, pad=0.1)
cbar.set_label('Número de casos de HIV')

plt.show()

plt.figure(figsize=(10, 7))
plt.bar(range(len(PCA.components_[0])), PCA.components_[0])
plt.xlabel('Variables')
plt.ylabel('Carga')
plt.title('Carga de Componentes para la Primera Componente Principal')
plt.show()

def biplot(score, coeff, labels=None):
    xs = score[:, 0]
    ys = score[:, 1]
    n = coeff.shape[0]
    plt.figure(figsize=(10, 7))
    plt.scatter(xs, ys)
    for i in range(n):
        plt.arrow(0, 0, coeff[i, 0], coeff[i, 1], color='r', alpha=0.5)
        if labels is None:
            plt.text(coeff[i, 0]*1.15, coeff[i, 1]*1.15, "Var"+str(i+1), color='g', ha='center', va='center')
        else:
            plt.text(coeff[i, 0]*1.15, coeff[i, 1]*1.15, labels[i], color='g', ha='center', va='center')
    plt.xlabel('Primera Componente Principal')
    plt.ylabel('Segunda Componente Principal')
    plt.grid(True)
    plt.show()

biplot(X_pca[:, :2], np.transpose(PCA.components_[:2, :]), labels=data.columns)

components_df = pd.DataFrame(PCA.components_, columns=data.columns, index=[f'PC{i+1}' for i in range(PCA.components_.shape[0])])

print("Cargas para la Primera Componente Principal:")
print(components_df.loc['PC1'].sort_values(ascending=False))

print( )

print("Cargas para la Segunda Componente Principal:")
print(components_df.loc['PC2'].sort_values(ascending=False))

print( )

print("Cargas para la Tercera Componente Principal:")
print(components_df.loc['PC3'].sort_values(ascending=False))

"""# t-SNE"""

from sklearn.manifold import TSNE
import seaborn as sns

scaler = StandardScaler()
data_scaled = scaler.fit_transform(data)

tsne = TSNE(n_components=2, random_state=42)
tsne_resultats = tsne.fit_transform(data_scaled)

df_tsne = pd.DataFrame(tsne_resultats, columns=['Componente 1', 'Componente 2'])
df_tsne['Pais'] = countries
df_tsne['Casos_VIH'] = sida

plt.figure(figsize=(10, 6))
sns.scatterplot(x='Componente 1', y='Componente 2', data=df_tsne, hue='Casos_VIH', palette='viridis', sizes=(20, 200))
plt.title('Visualización t-SNE coloreada por el número de casos de VIH')
plt.legend(bbox_to_anchor=(1.05, 1), loc='upper left')
plt.show()

df_tsne = pd.DataFrame(tsne_resultats, columns=['Componente 1', 'Componente 2'])
df_tsne['Pais'] = countries
df_tsne['Casos_Tuberculosis'] = tuberculosis

plt.figure(figsize=(10, 6))
sns.scatterplot(x='Componente 1', y='Componente 2', data=df_tsne, hue='Casos_Tuberculosis', palette='viridis', sizes=(20, 200))
plt.title('Visualización t-SNE coloreada por el número de casos de Tuberculosis')
plt.legend(bbox_to_anchor=(1.05, 1), loc='upper left')
plt.show()

df_tsne = pd.DataFrame(tsne_resultats, columns=['Componente 1', 'Componente 2'])
df_tsne['Pais'] = countries
df_tsne['Casos_Malaria'] = mala

plt.figure(figsize=(10, 6))
sns.scatterplot(x='Componente 1', y='Componente 2', data=df_tsne, hue='Casos_Malaria', palette='viridis', sizes=(20, 200))
plt.title('Visualización t-SNE coloreada por el número de casos de Malaria')
plt.legend(bbox_to_anchor=(1.05, 1), loc='upper left')
plt.show()

tsne = TSNE(n_components=3, random_state=42)
resultats_3d = tsne.fit_transform(data_scaled)

from mpl_toolkits.mplot3d import Axes3D

df_tsne = pd.DataFrame(resultats_3d, columns=['Componente 1', 'Componente 2', 'Componente 3'])
df_tsne['Pais'] = countries
df_tsne['Casos_VIH'] = hiv

fig = plt.figure(figsize=(10, 6))
ax = fig.add_subplot(111, projection='3d')

sc = ax.scatter(df_tsne['Componente 1'], df_tsne['Componente 2'], df_tsne['Componente 3'], c=sida, cmap='viridis')

ax.set_xlabel('Componente 1')
ax.set_ylabel('Componente 2')
ax.set_zlabel('Componente 3')
plt.title('Visualización t-SNE 3D coloreada por el número de casos de VIH')

cbar = plt.colorbar(sc)
cbar.set_label('Casos de VIH', rotation=270, labelpad=15)

plt.show()

fig = plt.figure(figsize=(10, 6))
ax = fig.add_subplot(111, projection='3d')

x = resultats_3d[:, 0]
y = resultats_3d[:, 1]
z = resultats_3d[:, 2]

scatter = ax.scatter(x, y, z, c=tuberculosis, cmap='viridis', marker='o', alpha=0.6, edgecolor='w', linewidth=0.5, s=50)

plt.title('Visualización t-SNE 3D coloreada por el número de casos de Tuberculosis')

ax.set_xlabel('Componente 1')
ax.set_ylabel('Componente 2')
ax.set_zlabel('Componente 3')

plt.show()

fig = plt.figure(figsize=(10, 6))
ax = fig.add_subplot(111, projection='3d')

x = resultats_3d[:, 0]
y = resultats_3d[:, 1]
z = resultats_3d[:, 2]

scatter = ax.scatter(x, y, z, c=mala, cmap='viridis', marker='o', alpha=0.6, edgecolor='w', linewidth=0.5, s=50)

plt.title('Visualización t-SNE 3D coloreada por el número de casos de Malaria')

ax.set_xlabel('Componente 1')
ax.set_ylabel('Componente 2')
ax.set_zlabel('Componente 3')

plt.show()

from scipy.stats import kde

x = tsne_resultats[:, 0]
y = tsne_resultats[:, 1]

x_min, x_max = x.min() - 1, x.max() + 1
y_min, y_max = y.min() - 1, y.max() + 1
xx, yy = np.mgrid[x_min:x_max:100j, y_min:y_max:100j]

positions = np.vstack([xx.ravel(), yy.ravel()])
values = np.vstack([x, y])
kernel = kde.gaussian_kde(values)
f = np.reshape(kernel(positions).T, xx.shape)

fig = plt.figure(figsize=(6, 6))
ax = fig.add_subplot(111)

cset = ax.contourf(xx, yy, f, cmap="Blues")

cbar = plt.colorbar(cset)
cbar.set_label('Densidad')

ax.set_xlabel('Componente t-SNE 1')
ax.set_ylabel('Componente t-SNE 2')
ax.set_title('Mapa de Calor de Densidad t-SNE')
plt.show()

"""# Regresión"""

import pandas as pd
import statsmodels.api as sm
from sklearn.model_selection import train_test_split
from sklearn.metrics import r2_score
from sklearn.linear_model import LinearRegression
from sklearn.linear_model import Ridge
from sklearn.preprocessing import StandardScaler
from sklearn.linear_model import Lasso
from sklearn.metrics import mean_squared_error

X = data_scaled
y = df[['HIV Cases']]
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
model = LinearRegression()
model.fit(X_train, y_train)
y_pred = model.predict(X_test)

mse = mean_squared_error(y_test, y_pred)
print(f'Mean Squared Error: {mse}')

print("\n" + "="*80 + "\n")

r2 = r2_score(y_test, y_pred)
print(f'El valor de R^2 es: {r2}')

print("\n" + "="*80 + "\n")

coefficients = model.coef_
for i in range(len(coefficients[0])):
    print(f"Coeficiente para la variable {data.columns[i]}: {coefficients[0][i]}")

ridge = Ridge(alpha=1.0)
ridge.fit(X_train, y_train)

mse = mean_squared_error(y_test, ridge.predict(X_test))
print(f"Mean Squared Error with Ridge: {mse}")

print("\n" + "="*80 + "\n")

r2 = r2_score(y_test, ridge.predict(X_test))
print(f'El valor de R^2 es: {r2}')

print("\n" + "="*80 + "\n")

coefficients = ridge.coef_
for i in range(len(coefficients[0])):
    print(f"Coeficiente para la variable {data.columns[i]}: {coefficients[0][i]}")

lasso = Lasso(alpha=0.18)
lasso.fit(X_train, y_train)
y_pred = lasso.predict(X_test)

mse = mean_squared_error(y_test, y_pred)
print(f'Mean Squared Error con Lasso: {mse}')

print("\n" + "="*80 + "\n")

r2 = r2_score(y_test, y_pred)
print(f'El valor de R^2 es: {r2}')

print("\n" + "="*80 + "\n")

coefficients = lasso.coef_
for i in range(len(coefficients)):
    print(f"Coeficiente para la variable {data.columns[i]}: {coefficients[i]}")

data_hiv = data

data_hiv = data_hiv.drop('Adolescent Birth', axis=1)
data_hiv = data_hiv.drop('Births Attended by Skilled Personal', axis=1)
data_hiv = data_hiv.drop('Death Rate per Air Pollution', axis=1)
data_hiv = data_hiv.drop('Densidad de Poblacion', axis=1)
data_hiv = data_hiv.drop('Population using Drinking Water Services', axis=1)
data_hiv = data_hiv.drop('Population with Health Expenses over 25% of Income', axis=1)
data_hiv = data_hiv.drop('Raised Blood Presure', axis=1)

scaler = StandardScaler()
data_scaled_hiv = scaler.fit_transform(data_hiv)

X = data_scaled
y = df[['TB Cases']]
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
model = LinearRegression()
model.fit(X_train, y_train)
y_pred = model.predict(X_test)

mse = mean_squared_error(y_test, y_pred)
print(f'Mean Squared Error: {mse}')

print("\n" + "="*80 + "\n")

r2 = r2_score(y_test, y_pred)
print(f'El valor de R^2 es: {r2}')

print("\n" + "="*80 + "\n")

coefficients = model.coef_
for i in range(len(coefficients[0])):
    print(f"Coeficiente para la variable {data.columns[i]}: {coefficients[0][i]}")

lasso = Lasso(alpha=0.011)
lasso.fit(X_train, y_train)
y_pred = lasso.predict(X_test)

mse = mean_squared_error(y_test, y_pred)
print(f'Mean Squared Error con Lasso: {mse}')

print("\n" + "="*80 + "\n")

r2 = r2_score(y_test, y_pred)
print(f'El valor de R^2 es: {r2}')

print("\n" + "="*80 + "\n")

coefficients = lasso.coef_
for i in range(len(coefficients)):
    print(f"Coeficiente para la variable {data.columns[i]}: {coefficients[i]}")

data_tb = data

data_tb = data_tb.drop('Adolescent Birth', axis=1)
data_tb = data_tb.drop('Death Rate per Air Pollution', axis=1)
data_tb = data_tb.drop('Nursing Personal', axis=1)
data_tb = data_tb.drop('PIB per capita', axis=1)
data_tb = data_tb.drop('Population using Drinking Water Services', axis=1)
data_tb = data_tb.drop('Population using Sanitation Services', axis=1)
data_tb = data_tb.drop('Population with Health Expenses over 25% of Income', axis=1)

scaler = StandardScaler()
data_scaled_tb = scaler.fit_transform(data_tb)

X = data_scaled
y = df[['Malaria Cases']]
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.05, random_state=42)
model = LinearRegression()
model.fit(X_train, y_train)
y_pred = model.predict(X_test)

mse = mean_squared_error(y_test, y_pred)
print(f'Mean Squared Error: {mse}')

print("\n" + "="*80 + "\n")

r2 = r2_score(y_test, y_pred)
print(f'El valor de R^2 es: {r2}')

print("\n" + "="*80 + "\n")

coefficients = model.coef_
for i in range(len(coefficients[0])):
    print(f"Coeficiente para la variable {data.columns[i]}: {coefficients[0][i]}")

import pandas as pd
from sklearn.preprocessing import StandardScaler
from google.colab import files
import io

uploaded = files.upload()

data_malaria = pd.read_csv(io.BytesIO(uploaded['Malaria_data.csv']))

data_malaria = data_malaria.drop('Country Name', axis=1)

scaler = StandardScaler()
data_scaled_malaria = scaler.fit_transform(data_malaria)

X = data_scaled_malaria
y = df[['Malaria Cases']]
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
model = LinearRegression()
model.fit(X_train, y_train)
y_pred = model.predict(X_test)

mse = mean_squared_error(y_test, y_pred)
print(f'Mean Squared Error: {mse}')

print("\n" + "="*80 + "\n")

r2 = r2_score(y_test, y_pred)
print(f'El valor de R^2 es: {r2}')

print("\n" + "="*80 + "\n")

coefficients = model.coef_
for i in range(len(coefficients[0])):
    print(f"Coeficiente para la variable {data_malaria.columns[i]}: {coefficients[0][i]}")

lasso = Lasso(alpha=0.1)
lasso.fit(X_train, y_train)
y_pred = lasso.predict(X_test)

mse = mean_squared_error(y_test, y_pred)
print(f'Mean Squared Error con Lasso: {mse}')

print("\n" + "="*80 + "\n")

r2 = r2_score(y_test, y_pred)
print(f'El valor de R^2 es: {r2}')

print("\n" + "="*80 + "\n")

coefficients = lasso.coef_
for i in range(len(coefficients)):
    print(f"Coeficiente para la variable {data_malaria.columns[i]}: {coefficients[i]}")

"""# Random Forest"""

from sklearn.ensemble import RandomForestRegressor
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error
from sklearn.model_selection import cross_val_score, train_test_split
from sklearn.metrics import accuracy_score, classification_report, confusion_matrix
import numpy as np
from sklearn.model_selection import GridSearchCV

X = data_scaled_hiv
y = df[['HIV Cases']]

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

model = RandomForestRegressor(n_estimators=8, random_state=42)
model.fit(X_train, y_train.values.ravel())
predictions = model.predict(X_test)

mse = mean_squared_error(y_test, predictions)
print(f"Mean Squared Error: {mse}")

r2 = r2_score(y_test, predictions)
print(f"R-squared: {r2}")

importances = model.feature_importances_

indices = np.argsort(importances)[::-1]

print("Ranking de características:")

for f in range(X_train.shape[1]):
    print(f"{f + 1}. {data.columns[indices[f]]} ({importances[indices[f]]})")

from sklearn.ensemble import RandomForestRegressor
from sklearn.metrics import r2_score
from sklearn.model_selection import train_test_split

best_r2 = -float('inf')
best_n_estimators = 0
best_max_depth = 0
best_min_samples_leaf = 0
best_min_samples_split = 0

n_estimators_range = range(1, 41)
max_depth_range = range(1, 16)
min_samples_leaf_range = range(1, 16)
min_samples_split_range = range(2, 16)

for n_estimators in n_estimators_range:
    for max_depth in max_depth_range:
        for min_samples_leaf in min_samples_leaf_range:
            for min_samples_split in min_samples_split_range:

                model = RandomForestRegressor(
                    n_estimators=n_estimators,
                    max_depth=max_depth,
                    min_samples_leaf=min_samples_leaf,
                    min_samples_split=min_samples_split,
                    random_state=42
                )

                model.fit(X_train, y_train.values.ravel())
                predictions = model.predict(X_test)

                r2 = r2_score(y_test, predictions)

                if r2 > best_r2:
                    best_r2 = r2
                    best_n_estimators = n_estimators
                    best_max_depth = max_depth
                    best_min_samples_leaf = min_samples_leaf
                    best_min_samples_split = min_samples_split

print(f"Mejor R-squared: {best_r2}")
print(f"Obtenido con {best_n_estimators} estimadores, max_depth de {best_max_depth}, min_samples_leaf de {best_min_samples_leaf}, y min_samples_split de {best_min_samples_split}.")

X = data_scaled_tb
y = df[['TB Cases']]

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

model = RandomForestRegressor(n_estimators=42, max_depth=8, min_samples_leaf=1, min_samples_split=2, random_state=42)
model.fit(X_train, y_train.values.ravel())
predictions = model.predict(X_test)

mse = mean_squared_error(y_test, predictions)
print(f"Mean Squared Error: {mse}")

r2 = r2_score(y_test, predictions)
print(f"R-squared: {r2}")

from sklearn.ensemble import RandomForestRegressor
from sklearn.metrics import r2_score
from sklearn.model_selection import train_test_split

best_r2 = -float('inf')
best_n_estimators = 0
best_max_depth = 0
best_min_samples_leaf = 0
best_min_samples_split = 0

n_estimators_range = range(30, 51)
max_depth_range = range(1, 21)
min_samples_leaf_range = range(1, 7)
min_samples_split_range = range(2, 7)

for n_estimators in n_estimators_range:
    for max_depth in max_depth_range:
        for min_samples_leaf in min_samples_leaf_range:
            for min_samples_split in min_samples_split_range:

                model = RandomForestRegressor(
                    n_estimators=n_estimators,
                    max_depth=max_depth,
                    min_samples_leaf=min_samples_leaf,
                    min_samples_split=min_samples_split,
                    random_state=42
                )

                model.fit(X_train, y_train.values.ravel())
                predictions = model.predict(X_test)

                r2 = r2_score(y_test, predictions)

                if r2 > best_r2:
                    best_r2 = r2
                    best_n_estimators = n_estimators
                    best_max_depth = max_depth
                    best_min_samples_leaf = min_samples_leaf
                    best_min_samples_split = min_samples_split

print(f"Mejor R-squared: {best_r2}")
print(f"Obtenido con {best_n_estimators} estimadores, max_depth de {best_max_depth}, min_samples_leaf de {best_min_samples_leaf}, y min_samples_split de {best_min_samples_split}.")

importances = model.feature_importances_

indices = np.argsort(importances)[::-1]

print("Ranking de características:")

for f in range(X_train.shape[1]):
    print(f"{f + 1}. {data.columns[indices[f]]} ({importances[indices[f]]})")

X = data_scaled_malaria
y = df[['Malaria Cases']]

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

#model = RandomForestRegressor(n_estimators=42, max_depth=8, min_samples_leaf=1, min_samples_split=2, random_state=42)
model = RandomForestRegressor(n_estimators=10, random_state=42)
model.fit(X_train, y_train.values.ravel())
predictions = model.predict(X_test)

mse = mean_squared_error(y_test, predictions)
print(f"Mean Squared Error: {mse}")

r2 = r2_score(y_test, predictions)
print(f"R-squared: {r2}")

importances = model.feature_importances_

indices = np.argsort(importances)[::-1]

print("Ranking de características:")

for f in range(X_train.shape[1]):
    print(f"{f + 1}. {data_malaria.columns[indices[f]]} ({importances[indices[f]]})")

"""# Gráficos Geográficos"""

import folium
import branca
import branca.colormap as cm

from geopy.geocoders import Photon

geolocator = Photon(user_agent="measurements")

def get_lat_lon(country):
    location = geolocator.geocode(country)
    if location:
        return location.latitude, location.longitude
    else:
        return None, None

correcciones = {
    "Chad": "Tchad",
    "Comoros": "Comores",
    "Guinea": "Guinea Equatorial",
}

countries_mapa = [correcciones.get(name, name) for name in countries]

latitudes, longitudes = zip(*[get_lat_lon(country) for country in countries_mapa])

mapa_hiv = folium.Map(location=[4.68, 20.93], zoom_start=3, dragging=False, touchZoom=False, scrollWheelZoom=False, doubleClickZoom=False, zoomControl=False)

data_values = hiv

color_scale = cm.linear.YlOrRd_09.scale(min(data_values), max(data_values))

for lat, lon, value, country in zip(latitudes, longitudes, data_values, countries_mapa):
    color = color_scale(value)
    folium.Circle(
        location=[lat, lon],
        radius=100000,
        color=color,
        fill=True,
        fill_color=color,
        fill_opacity=1,
        tooltip=f"{country}: {value}"
    ).add_to(mapa_hiv)


color_scale.add_to(mapa_hiv)

mapa_hiv

mapa_tuberculosis = folium.Map(location=[4.68, 20.93], zoom_start=3, dragging=False, touchZoom=False, scrollWheelZoom=False, doubleClickZoom=False, zoomControl=False)
data_values = tuberculosis

color_scale = cm.linear.YlOrRd_09.scale(min(data_values), max(data_values))

for lat, lon, value, country in zip(latitudes, longitudes, data_values, countries_mapa):
    color = color_scale(value)
    folium.Circle(
        location=[lat, lon],
        radius=100000,
        color=color,
        fill=True,
        fill_color=color,
        fill_opacity=1,
        tooltip=f"{country}: {value}"
    ).add_to(mapa_tuberculosis)

color_scale.add_to(mapa_tuberculosis)

mapa_tuberculosis

mapa_malaria = folium.Map(location=[4.68, 20.93], zoom_start=3, dragging=False, touchZoom=False, scrollWheelZoom=False, doubleClickZoom=False, zoomControl=False)
data_values = malaria

color_scale = cm.linear.YlOrRd_09.scale(min(data_values), max(data_values))

for lat, lon, value, country in zip(latitudes, longitudes, data_values, countries_mapa):
    color = color_scale(value)
    folium.Circle(
        location=[lat, lon],
        radius=100000,
        color=color,
        fill=True,
        fill_color=color,
        fill_opacity=1,
        tooltip=f"{country}: {value}"
    ).add_to(mapa_malaria)

color_scale.add_to(mapa_malaria)

mapa_malaria
